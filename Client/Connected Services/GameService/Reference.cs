//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.GameService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerManager.PlayerAuthResult", Namespace="http://schemas.datacontract.org/2004/07/Core")]
    public enum PlayerManagerPlayerAuthResult : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotVerified = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidCredentials = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IncorrectPassword = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DatabaseError = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Player", Namespace="http://schemas.datacontract.org/2004/07/Service")]
    [System.SerializableAttribute()]
    public partial class Player : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AvatarField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GamesCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsGuestField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NicknameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime RegisteredField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.GameService.Player.StatusType StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WinsCountField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Avatar {
            get {
                return this.AvatarField;
            }
            set {
                if ((this.AvatarField.Equals(value) != true)) {
                    this.AvatarField = value;
                    this.RaisePropertyChanged("Avatar");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GamesCount {
            get {
                return this.GamesCountField;
            }
            set {
                if ((this.GamesCountField.Equals(value) != true)) {
                    this.GamesCountField = value;
                    this.RaisePropertyChanged("GamesCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsGuest {
            get {
                return this.IsGuestField;
            }
            set {
                if ((this.IsGuestField.Equals(value) != true)) {
                    this.IsGuestField = value;
                    this.RaisePropertyChanged("IsGuest");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Nickname {
            get {
                return this.NicknameField;
            }
            set {
                if ((object.ReferenceEquals(this.NicknameField, value) != true)) {
                    this.NicknameField = value;
                    this.RaisePropertyChanged("Nickname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Registered {
            get {
                return this.RegisteredField;
            }
            set {
                if ((this.RegisteredField.Equals(value) != true)) {
                    this.RegisteredField = value;
                    this.RaisePropertyChanged("Registered");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.GameService.Player.StatusType Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WinsCount {
            get {
                return this.WinsCountField;
            }
            set {
                if ((this.WinsCountField.Equals(value) != true)) {
                    this.WinsCountField = value;
                    this.RaisePropertyChanged("WinsCount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="Player.StatusType", Namespace="http://schemas.datacontract.org/2004/07/Service")]
        public enum StatusType : int {
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            Offline = 0,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            Online = 1,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            InGame = 2,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerManager.PlayerVerificationResult", Namespace="http://schemas.datacontract.org/2004/07/Core")]
    public enum PlayerManagerPlayerVerificationResult : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AuthFailed = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidCode = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DatabaseError = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerManager.PlayerResgisterResult", Namespace="http://schemas.datacontract.org/2004/07/Core")]
    public enum PlayerManagerPlayerResgisterResult : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PlayerAlreadyExists = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidInputs = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DatabaseError = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerManager.PlayerFriendRequestResult", Namespace="http://schemas.datacontract.org/2004/07/Core")]
    public enum PlayerManagerPlayerFriendRequestResult : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SelfRequest = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AlreadyFriends = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PendingRequest = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SenderPlayerDoesNotExists = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ReceiverPlayerDoesNotExists = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DatabaseError = 6,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DisconnectionReason", Namespace="http://schemas.datacontract.org/2004/07/Service")]
    public enum DisconnectionReason : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DuplicatePlayerSession = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ServerShutdown = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Game.BoardSlot", Namespace="http://schemas.datacontract.org/2004/07/Core")]
    [System.SerializableAttribute()]
    public partial class GameBoardSlot : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.GameService.GameBoardSlotBonus BonusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Client.GameService.GameTile> TileField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.GameService.GameBoardSlotBonus Bonus {
            get {
                return this.BonusField;
            }
            set {
                if ((this.BonusField.Equals(value) != true)) {
                    this.BonusField = value;
                    this.RaisePropertyChanged("Bonus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<Client.GameService.GameTile> Tile {
            get {
                return this.TileField;
            }
            set {
                if ((this.TileField.Equals(value) != true)) {
                    this.TileField = value;
                    this.RaisePropertyChanged("Tile");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Game.BoardSlotBonus", Namespace="http://schemas.datacontract.org/2004/07/Core")]
    public enum GameBoardSlotBonus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Center = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TripleWord = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DoubleWord = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TripleLetter = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DoubleLetter = 5,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Game.Tile", Namespace="http://schemas.datacontract.org/2004/07/Core")]
    public enum GameTile : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        A = 65,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        B = 66,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        C = 67,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        D = 68,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        E = 69,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        F = 70,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        G = 71,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        H = 72,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        I = 73,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        J = 74,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        K = 75,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        L = 76,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        M = 77,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        N = 78,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        O = 79,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        P = 80,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Q = 81,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        R = 82,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        S = 83,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        T = 84,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        U = 85,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        V = 86,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        W = 87,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        X = 88,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Y = 89,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Z = 90,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ñ = 209,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Wildcard = 32,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Game.SupportedLanguage", Namespace="http://schemas.datacontract.org/2004/07/Core")]
    public enum GameSupportedLanguage : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        en_US = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        es_MX = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Party", Namespace="http://schemas.datacontract.org/2004/07/Service")]
    [System.SerializableAttribute()]
    public partial class Party : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InviteCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.GameService.Player LeaderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.GameService.Player[] PlayersField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InviteCode {
            get {
                return this.InviteCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.InviteCodeField, value) != true)) {
                    this.InviteCodeField = value;
                    this.RaisePropertyChanged("InviteCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.GameService.Player Leader {
            get {
                return this.LeaderField;
            }
            set {
                if ((object.ReferenceEquals(this.LeaderField, value) != true)) {
                    this.LeaderField = value;
                    this.RaisePropertyChanged("Leader");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.GameService.Player[] Players {
            get {
                return this.PlayersField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayersField, value) != true)) {
                    this.PlayersField = value;
                    this.RaisePropertyChanged("Players");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="JoinPartyResult", Namespace="http://schemas.datacontract.org/2004/07/Service")]
    public enum JoinPartyResult : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PartyNotFound = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PartyIsFull = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WhoAreYou = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameStartResult", Namespace="http://schemas.datacontract.org/2004/07/Service")]
    public enum GameStartResult : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotEnoughPlayers = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GameService.IPlayerManager", CallbackContract=typeof(Client.GameService.IPlayerManagerCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IPlayerManager {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerManager/Login")]
        void Login(string nickname, string password);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerManager/Login")]
        System.Threading.Tasks.Task LoginAsync(string nickname, string password);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerManager/LoginAsGuest")]
        void LoginAsGuest();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerManager/LoginAsGuest")]
        System.Threading.Tasks.Task LoginAsGuestAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerManager/RegisterPlayer")]
        void RegisterPlayer(string nickname, string password, string email);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerManager/RegisterPlayer")]
        System.Threading.Tasks.Task RegisterPlayerAsync(string nickname, string password, string email);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerManager/ResendVerificationCode")]
        void ResendVerificationCode(string nickname, string password);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerManager/ResendVerificationCode")]
        System.Threading.Tasks.Task ResendVerificationCodeAsync(string nickname, string password);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerManager/VerifyPlayer")]
        void VerifyPlayer(string nickname, string password, string code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerManager/VerifyPlayer")]
        System.Threading.Tasks.Task VerifyPlayerAsync(string nickname, string password, string code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, Action="http://tempuri.org/IPlayerManager/Logout")]
        void Logout();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, Action="http://tempuri.org/IPlayerManager/Logout")]
        System.Threading.Tasks.Task LogoutAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerManager/GetFriendList")]
        void GetFriendList();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerManager/GetFriendList")]
        System.Threading.Tasks.Task GetFriendListAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerManager/GetFriendRequests")]
        void GetFriendRequests();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerManager/GetFriendRequests")]
        System.Threading.Tasks.Task GetFriendRequestsAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerManager/SendFriendRequest")]
        void SendFriendRequest(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerManager/SendFriendRequest")]
        System.Threading.Tasks.Task SendFriendRequestAsync(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerManager/AcceptFriendRequest")]
        void AcceptFriendRequest(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerManager/AcceptFriendRequest")]
        System.Threading.Tasks.Task AcceptFriendRequestAsync(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerManager/DeclineFriendRequest")]
        void DeclineFriendRequest(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerManager/DeclineFriendRequest")]
        System.Threading.Tasks.Task DeclineFriendRequestAsync(string nickname);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlayerManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerManager/LoginResponseHandler")]
        void LoginResponseHandler(Client.GameService.PlayerManagerPlayerAuthResult loginResult, Client.GameService.Player player, string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerManager/VerificationResponseHandler")]
        void VerificationResponseHandler(Client.GameService.PlayerManagerPlayerVerificationResult verificationResult);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerManager/RegisterPlayerResponseHandler")]
        void RegisterPlayerResponseHandler(Client.GameService.PlayerManagerPlayerResgisterResult registrationResult);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerManager/SendFriendRequestResponseHandler")]
        void SendFriendRequestResponseHandler(Client.GameService.PlayerManagerPlayerFriendRequestResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerManager/GetFriendListResponseHandler")]
        void GetFriendListResponseHandler(Client.GameService.Player[] friends);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerManager/GetFriendRequestsResponseHandler")]
        void GetFriendRequestsResponseHandler(Client.GameService.Player[] friendRequests);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerManager/ReceiveFriendRequest")]
        void ReceiveFriendRequest(Client.GameService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerManager/ReceiveFriendAdd")]
        void ReceiveFriendAdd(Client.GameService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/UpdateFriendStatus", ReplyAction="http://tempuri.org/IPlayerManager/UpdateFriendStatusResponse")]
        void UpdateFriendStatus(Client.GameService.Player friend, Client.GameService.Player.StatusType status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/Disconnect", ReplyAction="http://tempuri.org/IPlayerManager/DisconnectResponse")]
        void Disconnect(Client.GameService.DisconnectionReason reason);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlayerManagerChannel : Client.GameService.IPlayerManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlayerManagerClient : System.ServiceModel.DuplexClientBase<Client.GameService.IPlayerManager>, Client.GameService.IPlayerManager {
        
        public PlayerManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public PlayerManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public PlayerManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Login(string nickname, string password) {
            base.Channel.Login(nickname, password);
        }
        
        public System.Threading.Tasks.Task LoginAsync(string nickname, string password) {
            return base.Channel.LoginAsync(nickname, password);
        }
        
        public void LoginAsGuest() {
            base.Channel.LoginAsGuest();
        }
        
        public System.Threading.Tasks.Task LoginAsGuestAsync() {
            return base.Channel.LoginAsGuestAsync();
        }
        
        public void RegisterPlayer(string nickname, string password, string email) {
            base.Channel.RegisterPlayer(nickname, password, email);
        }
        
        public System.Threading.Tasks.Task RegisterPlayerAsync(string nickname, string password, string email) {
            return base.Channel.RegisterPlayerAsync(nickname, password, email);
        }
        
        public void ResendVerificationCode(string nickname, string password) {
            base.Channel.ResendVerificationCode(nickname, password);
        }
        
        public System.Threading.Tasks.Task ResendVerificationCodeAsync(string nickname, string password) {
            return base.Channel.ResendVerificationCodeAsync(nickname, password);
        }
        
        public void VerifyPlayer(string nickname, string password, string code) {
            base.Channel.VerifyPlayer(nickname, password, code);
        }
        
        public System.Threading.Tasks.Task VerifyPlayerAsync(string nickname, string password, string code) {
            return base.Channel.VerifyPlayerAsync(nickname, password, code);
        }
        
        public void Logout() {
            base.Channel.Logout();
        }
        
        public System.Threading.Tasks.Task LogoutAsync() {
            return base.Channel.LogoutAsync();
        }
        
        public void GetFriendList() {
            base.Channel.GetFriendList();
        }
        
        public System.Threading.Tasks.Task GetFriendListAsync() {
            return base.Channel.GetFriendListAsync();
        }
        
        public void GetFriendRequests() {
            base.Channel.GetFriendRequests();
        }
        
        public System.Threading.Tasks.Task GetFriendRequestsAsync() {
            return base.Channel.GetFriendRequestsAsync();
        }
        
        public void SendFriendRequest(string nickname) {
            base.Channel.SendFriendRequest(nickname);
        }
        
        public System.Threading.Tasks.Task SendFriendRequestAsync(string nickname) {
            return base.Channel.SendFriendRequestAsync(nickname);
        }
        
        public void AcceptFriendRequest(string nickname) {
            base.Channel.AcceptFriendRequest(nickname);
        }
        
        public System.Threading.Tasks.Task AcceptFriendRequestAsync(string nickname) {
            return base.Channel.AcceptFriendRequestAsync(nickname);
        }
        
        public void DeclineFriendRequest(string nickname) {
            base.Channel.DeclineFriendRequest(nickname);
        }
        
        public System.Threading.Tasks.Task DeclineFriendRequestAsync(string nickname) {
            return base.Channel.DeclineFriendRequestAsync(nickname);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GameService.IPartyChat", CallbackContract=typeof(Client.GameService.IPartyChatCallback))]
    public interface IPartyChat {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyChat/ConnectPartyChat")]
        void ConnectPartyChat(string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyChat/ConnectPartyChat")]
        System.Threading.Tasks.Task ConnectPartyChatAsync(string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyChat/Say")]
        void Say(string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyChat/Say")]
        System.Threading.Tasks.Task SayAsync(string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyChat/Whisper")]
        void Whisper(Client.GameService.Player receiver, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyChat/Whisper")]
        System.Threading.Tasks.Task WhisperAsync(Client.GameService.Player receiver, string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPartyChatCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPartyChat/Receive", ReplyAction="http://tempuri.org/IPartyChat/ReceiveResponse")]
        void Receive(Client.GameService.Player sender, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPartyChat/ReceiveWhisper", ReplyAction="http://tempuri.org/IPartyChat/ReceiveWhisperResponse")]
        void ReceiveWhisper(Client.GameService.Player sender, string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPartyChatChannel : Client.GameService.IPartyChat, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PartyChatClient : System.ServiceModel.DuplexClientBase<Client.GameService.IPartyChat>, Client.GameService.IPartyChat {
        
        public PartyChatClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public PartyChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public PartyChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PartyChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PartyChatClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void ConnectPartyChat(string sessionId) {
            base.Channel.ConnectPartyChat(sessionId);
        }
        
        public System.Threading.Tasks.Task ConnectPartyChatAsync(string sessionId) {
            return base.Channel.ConnectPartyChatAsync(sessionId);
        }
        
        public void Say(string message) {
            base.Channel.Say(message);
        }
        
        public System.Threading.Tasks.Task SayAsync(string message) {
            return base.Channel.SayAsync(message);
        }
        
        public void Whisper(Client.GameService.Player receiver, string message) {
            base.Channel.Whisper(receiver, message);
        }
        
        public System.Threading.Tasks.Task WhisperAsync(Client.GameService.Player receiver, string message) {
            return base.Channel.WhisperAsync(receiver, message);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GameService.IPartyGame", CallbackContract=typeof(Client.GameService.IPartyGameCallback))]
    public interface IPartyGame {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyGame/ConnectPartyGame")]
        void ConnectPartyGame(string playerSessionId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyGame/ConnectPartyGame")]
        System.Threading.Tasks.Task ConnectPartyGameAsync(string playerSessionId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyGame/PlaceTile")]
        void PlaceTile(int rackTileIndex, int x, int y);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyGame/PlaceTile")]
        System.Threading.Tasks.Task PlaceTileAsync(int rackTileIndex, int x, int y);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyGame/EndTurn")]
        void EndTurn();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyGame/EndTurn")]
        System.Threading.Tasks.Task EndTurnAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyGame/PassTurn")]
        void PassTurn();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyGame/PassTurn")]
        System.Threading.Tasks.Task PassTurnAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPartyGameCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPartyGame/UpdateBoard", ReplyAction="http://tempuri.org/IPartyGame/UpdateBoardResponse")]
        void UpdateBoard(Client.GameService.GameBoardSlot[][] board);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPartyGame/UpdatePlayerRack", ReplyAction="http://tempuri.org/IPartyGame/UpdatePlayerRackResponse")]
        void UpdatePlayerRack(System.Nullable<Client.GameService.GameTile>[] rack);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPartyGame/UpdatePlayerScore", ReplyAction="http://tempuri.org/IPartyGame/UpdatePlayerScoreResponse")]
        void UpdatePlayerScore(Client.GameService.Player player, int score);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPartyGame/UpdatePlayerTurn", ReplyAction="http://tempuri.org/IPartyGame/UpdatePlayerTurnResponse")]
        void UpdatePlayerTurn(Client.GameService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPartyGame/UpdateBagTilesLeft", ReplyAction="http://tempuri.org/IPartyGame/UpdateBagTilesLeftResponse")]
        void UpdateBagTilesLeft(int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPartyGame/SendInvalidTilePlacingError", ReplyAction="http://tempuri.org/IPartyGame/SendInvalidTilePlacingErrorResponse")]
        void SendInvalidTilePlacingError();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPartyGameChannel : Client.GameService.IPartyGame, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PartyGameClient : System.ServiceModel.DuplexClientBase<Client.GameService.IPartyGame>, Client.GameService.IPartyGame {
        
        public PartyGameClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public PartyGameClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public PartyGameClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PartyGameClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PartyGameClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void ConnectPartyGame(string playerSessionId) {
            base.Channel.ConnectPartyGame(playerSessionId);
        }
        
        public System.Threading.Tasks.Task ConnectPartyGameAsync(string playerSessionId) {
            return base.Channel.ConnectPartyGameAsync(playerSessionId);
        }
        
        public void PlaceTile(int rackTileIndex, int x, int y) {
            base.Channel.PlaceTile(rackTileIndex, x, y);
        }
        
        public System.Threading.Tasks.Task PlaceTileAsync(int rackTileIndex, int x, int y) {
            return base.Channel.PlaceTileAsync(rackTileIndex, x, y);
        }
        
        public void EndTurn() {
            base.Channel.EndTurn();
        }
        
        public System.Threading.Tasks.Task EndTurnAsync() {
            return base.Channel.EndTurnAsync();
        }
        
        public void PassTurn() {
            base.Channel.PassTurn();
        }
        
        public System.Threading.Tasks.Task PassTurnAsync() {
            return base.Channel.PassTurnAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GameService.IPartyManager", CallbackContract=typeof(Client.GameService.IPartyManagerCallback))]
    public interface IPartyManager {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyManager/ConnectPartyManager")]
        void ConnectPartyManager(string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyManager/ConnectPartyManager")]
        System.Threading.Tasks.Task ConnectPartyManagerAsync(string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyManager/CreateParty")]
        void CreateParty();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyManager/CreateParty")]
        System.Threading.Tasks.Task CreatePartyAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyManager/LeaveParty")]
        void LeaveParty();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyManager/LeaveParty")]
        System.Threading.Tasks.Task LeavePartyAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyManager/StartGame")]
        void StartGame(Client.GameService.GameSupportedLanguage language, int timeLimitMins);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyManager/StartGame")]
        System.Threading.Tasks.Task StartGameAsync(Client.GameService.GameSupportedLanguage language, int timeLimitMins);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyManager/JoinParty")]
        void JoinParty(string inviteCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyManager/JoinParty")]
        System.Threading.Tasks.Task JoinPartyAsync(string inviteCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyManager/InviteFriend")]
        void InviteFriend(Client.GameService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyManager/InviteFriend")]
        System.Threading.Tasks.Task InviteFriendAsync(Client.GameService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyManager/AcceptInvitation")]
        void AcceptInvitation(Client.GameService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyManager/AcceptInvitation")]
        System.Threading.Tasks.Task AcceptInvitationAsync(Client.GameService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyManager/KickPlayer")]
        void KickPlayer(Client.GameService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyManager/KickPlayer")]
        System.Threading.Tasks.Task KickPlayerAsync(Client.GameService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyManager/TransferLeadership")]
        void TransferLeadership(Client.GameService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyManager/TransferLeadership")]
        System.Threading.Tasks.Task TransferLeadershipAsync(Client.GameService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyManager/UpdateTimeLimitSetting")]
        void UpdateTimeLimitSetting(int time);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyManager/UpdateTimeLimitSetting")]
        System.Threading.Tasks.Task UpdateTimeLimitSettingAsync(int time);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyManager/UpdateLanguageSetting")]
        void UpdateLanguageSetting(Client.GameService.GameSupportedLanguage language);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyManager/UpdateLanguageSetting")]
        System.Threading.Tasks.Task UpdateLanguageSettingAsync(Client.GameService.GameSupportedLanguage language);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPartyManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPartyManager/CreatePartyCallback", ReplyAction="http://tempuri.org/IPartyManager/CreatePartyCallbackResponse")]
        void CreatePartyCallback(Client.GameService.Party party);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPartyManager/JoinPartyCallback", ReplyAction="http://tempuri.org/IPartyManager/JoinPartyCallbackResponse")]
        void JoinPartyCallback(Client.GameService.JoinPartyResult result, Client.GameService.Party party);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPartyManager/ReceiveInvitation", ReplyAction="http://tempuri.org/IPartyManager/ReceiveInvitationResponse")]
        void ReceiveInvitation(Client.GameService.Player player, string partyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPartyManager/AcceptInvitationCallback", ReplyAction="http://tempuri.org/IPartyManager/AcceptInvitationCallbackResponse")]
        void AcceptInvitationCallback(Client.GameService.Party party);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPartyManager/ReceiveInvitationDecline", ReplyAction="http://tempuri.org/IPartyManager/ReceiveInvitationDeclineResponse")]
        void ReceiveInvitationDecline(Client.GameService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPartyManager/ReceivePartyPlayerLeave", ReplyAction="http://tempuri.org/IPartyManager/ReceivePartyPlayerLeaveResponse")]
        void ReceivePartyPlayerLeave(Client.GameService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPartyManager/ReceivePartyPlayerJoin", ReplyAction="http://tempuri.org/IPartyManager/ReceivePartyPlayerJoinResponse")]
        void ReceivePartyPlayerJoin(Client.GameService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPartyManager/StartGameCallback", ReplyAction="http://tempuri.org/IPartyManager/StartGameCallbackResponse")]
        void StartGameCallback(Client.GameService.GameStartResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPartyManager/ReceiveGameStart", ReplyAction="http://tempuri.org/IPartyManager/ReceiveGameStartResponse")]
        void ReceiveGameStart();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPartyManager/ReceivePartyKick", ReplyAction="http://tempuri.org/IPartyManager/ReceivePartyKickResponse")]
        void ReceivePartyKick(Client.GameService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPartyManager/ReceivePartyLeaderTransfer", ReplyAction="http://tempuri.org/IPartyManager/ReceivePartyLeaderTransferResponse")]
        void ReceivePartyLeaderTransfer(Client.GameService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPartyManager/ReceivePartyTimeLimitUpdate", ReplyAction="http://tempuri.org/IPartyManager/ReceivePartyTimeLimitUpdateResponse")]
        void ReceivePartyTimeLimitUpdate(int time);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPartyManager/ReceivePartyLanguageUpdate", ReplyAction="http://tempuri.org/IPartyManager/ReceivePartyLanguageUpdateResponse")]
        void ReceivePartyLanguageUpdate(Client.GameService.GameSupportedLanguage language);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPartyManagerChannel : Client.GameService.IPartyManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PartyManagerClient : System.ServiceModel.DuplexClientBase<Client.GameService.IPartyManager>, Client.GameService.IPartyManager {
        
        public PartyManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public PartyManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public PartyManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PartyManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PartyManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void ConnectPartyManager(string sessionId) {
            base.Channel.ConnectPartyManager(sessionId);
        }
        
        public System.Threading.Tasks.Task ConnectPartyManagerAsync(string sessionId) {
            return base.Channel.ConnectPartyManagerAsync(sessionId);
        }
        
        public void CreateParty() {
            base.Channel.CreateParty();
        }
        
        public System.Threading.Tasks.Task CreatePartyAsync() {
            return base.Channel.CreatePartyAsync();
        }
        
        public void LeaveParty() {
            base.Channel.LeaveParty();
        }
        
        public System.Threading.Tasks.Task LeavePartyAsync() {
            return base.Channel.LeavePartyAsync();
        }
        
        public void StartGame(Client.GameService.GameSupportedLanguage language, int timeLimitMins) {
            base.Channel.StartGame(language, timeLimitMins);
        }
        
        public System.Threading.Tasks.Task StartGameAsync(Client.GameService.GameSupportedLanguage language, int timeLimitMins) {
            return base.Channel.StartGameAsync(language, timeLimitMins);
        }
        
        public void JoinParty(string inviteCode) {
            base.Channel.JoinParty(inviteCode);
        }
        
        public System.Threading.Tasks.Task JoinPartyAsync(string inviteCode) {
            return base.Channel.JoinPartyAsync(inviteCode);
        }
        
        public void InviteFriend(Client.GameService.Player player) {
            base.Channel.InviteFriend(player);
        }
        
        public System.Threading.Tasks.Task InviteFriendAsync(Client.GameService.Player player) {
            return base.Channel.InviteFriendAsync(player);
        }
        
        public void AcceptInvitation(Client.GameService.Player player) {
            base.Channel.AcceptInvitation(player);
        }
        
        public System.Threading.Tasks.Task AcceptInvitationAsync(Client.GameService.Player player) {
            return base.Channel.AcceptInvitationAsync(player);
        }
        
        public void KickPlayer(Client.GameService.Player player) {
            base.Channel.KickPlayer(player);
        }
        
        public System.Threading.Tasks.Task KickPlayerAsync(Client.GameService.Player player) {
            return base.Channel.KickPlayerAsync(player);
        }
        
        public void TransferLeadership(Client.GameService.Player player) {
            base.Channel.TransferLeadership(player);
        }
        
        public System.Threading.Tasks.Task TransferLeadershipAsync(Client.GameService.Player player) {
            return base.Channel.TransferLeadershipAsync(player);
        }
        
        public void UpdateTimeLimitSetting(int time) {
            base.Channel.UpdateTimeLimitSetting(time);
        }
        
        public System.Threading.Tasks.Task UpdateTimeLimitSettingAsync(int time) {
            return base.Channel.UpdateTimeLimitSettingAsync(time);
        }
        
        public void UpdateLanguageSetting(Client.GameService.GameSupportedLanguage language) {
            base.Channel.UpdateLanguageSetting(language);
        }
        
        public System.Threading.Tasks.Task UpdateLanguageSettingAsync(Client.GameService.GameSupportedLanguage language) {
            return base.Channel.UpdateLanguageSettingAsync(language);
        }
    }
}
