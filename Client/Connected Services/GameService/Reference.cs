//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.GameService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerManager.PlayerAuthResult", Namespace="http://schemas.datacontract.org/2004/07/Core")]
    public enum PlayerManagerPlayerAuthResult : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidCredentials = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IncorrectPassword = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DatabaseError = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Player", Namespace="http://schemas.datacontract.org/2004/07/Service")]
    [System.SerializableAttribute()]
    public partial class Player : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AvatarField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.GameService.Party CurrentPartyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NicknameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Avatar {
            get {
                return this.AvatarField;
            }
            set {
                if ((this.AvatarField.Equals(value) != true)) {
                    this.AvatarField = value;
                    this.RaisePropertyChanged("Avatar");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.GameService.Party CurrentParty {
            get {
                return this.CurrentPartyField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrentPartyField, value) != true)) {
                    this.CurrentPartyField = value;
                    this.RaisePropertyChanged("CurrentParty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Nickname {
            get {
                return this.NicknameField;
            }
            set {
                if ((object.ReferenceEquals(this.NicknameField, value) != true)) {
                    this.NicknameField = value;
                    this.RaisePropertyChanged("Nickname");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Party", Namespace="http://schemas.datacontract.org/2004/07/Service")]
    [System.SerializableAttribute()]
    public partial class Party : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.GameService.Player LeaderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.GameService.Player[] PlayersField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.GameService.Player Leader {
            get {
                return this.LeaderField;
            }
            set {
                if ((object.ReferenceEquals(this.LeaderField, value) != true)) {
                    this.LeaderField = value;
                    this.RaisePropertyChanged("Leader");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.GameService.Player[] Players {
            get {
                return this.PlayersField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayersField, value) != true)) {
                    this.PlayersField = value;
                    this.RaisePropertyChanged("Players");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerManager.PlayerResgisterResult", Namespace="http://schemas.datacontract.org/2004/07/Core")]
    public enum PlayerManagerPlayerResgisterResult : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PlayerAlreadyExists = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DatabaseError = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerManager.PlayerFriendRequestResult", Namespace="http://schemas.datacontract.org/2004/07/Core")]
    public enum PlayerManagerPlayerFriendRequestResult : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SelfRequest = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AlreadyFriends = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PendingRequest = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SenderPlayerDoesNotExists = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ReceiverPlayerDoesNotExists = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DatabaseError = 6,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GameService.IPlayerManager", CallbackContract=typeof(Client.GameService.IPlayerManagerCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IPlayerManager {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerManager/Login")]
        void Login(string nickname, string password);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerManager/Login")]
        System.Threading.Tasks.Task LoginAsync(string nickname, string password);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerManager/RegisterPlayer")]
        void RegisterPlayer(string nickname, string password, string email);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerManager/RegisterPlayer")]
        System.Threading.Tasks.Task RegisterPlayerAsync(string nickname, string password, string email);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, Action="http://tempuri.org/IPlayerManager/Logout")]
        void Logout();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, Action="http://tempuri.org/IPlayerManager/Logout")]
        System.Threading.Tasks.Task LogoutAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerManager/GetFriendList")]
        void GetFriendList();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerManager/GetFriendList")]
        System.Threading.Tasks.Task GetFriendListAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerManager/GetFriendRequests")]
        void GetFriendRequests();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerManager/GetFriendRequests")]
        System.Threading.Tasks.Task GetFriendRequestsAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerManager/SendFriendRequest")]
        void SendFriendRequest(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerManager/SendFriendRequest")]
        System.Threading.Tasks.Task SendFriendRequestAsync(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerManager/AcceptFriendRequest")]
        void AcceptFriendRequest(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerManager/AcceptFriendRequest")]
        System.Threading.Tasks.Task AcceptFriendRequestAsync(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerManager/DeclineFriendRequest")]
        void DeclineFriendRequest(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerManager/DeclineFriendRequest")]
        System.Threading.Tasks.Task DeclineFriendRequestAsync(string nickname);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlayerManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/LoginResponseHandler", ReplyAction="http://tempuri.org/IPlayerManager/LoginResponseHandlerResponse")]
        void LoginResponseHandler(Client.GameService.PlayerManagerPlayerAuthResult loginResult, Client.GameService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/RegisterPlayerResponseHandler", ReplyAction="http://tempuri.org/IPlayerManager/RegisterPlayerResponseHandlerResponse")]
        void RegisterPlayerResponseHandler(Client.GameService.PlayerManagerPlayerResgisterResult registrationResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/SendFriendRequestResponseHandler", ReplyAction="http://tempuri.org/IPlayerManager/SendFriendRequestResponseHandlerResponse")]
        void SendFriendRequestResponseHandler(Client.GameService.PlayerManagerPlayerFriendRequestResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/GetFriendListResponseHandler", ReplyAction="http://tempuri.org/IPlayerManager/GetFriendListResponseHandlerResponse")]
        void GetFriendListResponseHandler(Client.GameService.Player[] friends);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/GetFriendRequestsResponseHandler", ReplyAction="http://tempuri.org/IPlayerManager/GetFriendRequestsResponseHandlerResponse")]
        void GetFriendRequestsResponseHandler(Client.GameService.Player[] friendRequests);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/ReceiveFriendRequest", ReplyAction="http://tempuri.org/IPlayerManager/ReceiveFriendRequestResponse")]
        void ReceiveFriendRequest(Client.GameService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/ReceiveFriendAdd", ReplyAction="http://tempuri.org/IPlayerManager/ReceiveFriendAddResponse")]
        void ReceiveFriendAdd(Client.GameService.Player player);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlayerManagerChannel : Client.GameService.IPlayerManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlayerManagerClient : System.ServiceModel.DuplexClientBase<Client.GameService.IPlayerManager>, Client.GameService.IPlayerManager {
        
        public PlayerManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public PlayerManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public PlayerManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Login(string nickname, string password) {
            base.Channel.Login(nickname, password);
        }
        
        public System.Threading.Tasks.Task LoginAsync(string nickname, string password) {
            return base.Channel.LoginAsync(nickname, password);
        }
        
        public void RegisterPlayer(string nickname, string password, string email) {
            base.Channel.RegisterPlayer(nickname, password, email);
        }
        
        public System.Threading.Tasks.Task RegisterPlayerAsync(string nickname, string password, string email) {
            return base.Channel.RegisterPlayerAsync(nickname, password, email);
        }
        
        public void Logout() {
            base.Channel.Logout();
        }
        
        public System.Threading.Tasks.Task LogoutAsync() {
            return base.Channel.LogoutAsync();
        }
        
        public void GetFriendList() {
            base.Channel.GetFriendList();
        }
        
        public System.Threading.Tasks.Task GetFriendListAsync() {
            return base.Channel.GetFriendListAsync();
        }
        
        public void GetFriendRequests() {
            base.Channel.GetFriendRequests();
        }
        
        public System.Threading.Tasks.Task GetFriendRequestsAsync() {
            return base.Channel.GetFriendRequestsAsync();
        }
        
        public void SendFriendRequest(string nickname) {
            base.Channel.SendFriendRequest(nickname);
        }
        
        public System.Threading.Tasks.Task SendFriendRequestAsync(string nickname) {
            return base.Channel.SendFriendRequestAsync(nickname);
        }
        
        public void AcceptFriendRequest(string nickname) {
            base.Channel.AcceptFriendRequest(nickname);
        }
        
        public System.Threading.Tasks.Task AcceptFriendRequestAsync(string nickname) {
            return base.Channel.AcceptFriendRequestAsync(nickname);
        }
        
        public void DeclineFriendRequest(string nickname) {
            base.Channel.DeclineFriendRequest(nickname);
        }
        
        public System.Threading.Tasks.Task DeclineFriendRequestAsync(string nickname) {
            return base.Channel.DeclineFriendRequestAsync(nickname);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GameService.IPartyChat", CallbackContract=typeof(Client.GameService.IPartyChatCallback))]
    public interface IPartyChat {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyChat/Say")]
        void Say(string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyChat/Say")]
        System.Threading.Tasks.Task SayAsync(string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyChat/Whisper")]
        void Whisper(Client.GameService.Player receiver, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyChat/Whisper")]
        System.Threading.Tasks.Task WhisperAsync(Client.GameService.Player receiver, string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPartyChatCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPartyChat/Receive", ReplyAction="http://tempuri.org/IPartyChat/ReceiveResponse")]
        void Receive(Client.GameService.Player sender, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPartyChat/ReceiveWhisper", ReplyAction="http://tempuri.org/IPartyChat/ReceiveWhisperResponse")]
        void ReceiveWhisper(Client.GameService.Player sender, string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPartyChatChannel : Client.GameService.IPartyChat, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PartyChatClient : System.ServiceModel.DuplexClientBase<Client.GameService.IPartyChat>, Client.GameService.IPartyChat {
        
        public PartyChatClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public PartyChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public PartyChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PartyChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PartyChatClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Say(string message) {
            base.Channel.Say(message);
        }
        
        public System.Threading.Tasks.Task SayAsync(string message) {
            return base.Channel.SayAsync(message);
        }
        
        public void Whisper(Client.GameService.Player receiver, string message) {
            base.Channel.Whisper(receiver, message);
        }
        
        public System.Threading.Tasks.Task WhisperAsync(Client.GameService.Player receiver, string message) {
            return base.Channel.WhisperAsync(receiver, message);
        }
    }
}
